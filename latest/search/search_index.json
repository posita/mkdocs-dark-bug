{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Illustration of theme/scheme disconnect in squidfunk/mkdocs-material#2727 Setup Consider this \u2026 1 2 3 4 < picture > < source srcset = \"dark.png\" media = \"(prefers-color-scheme: dark)\" /> < img src = \"light.png\" /> </ picture > \u2026 which renders as: Expected behavior From the docs : In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media field next to the toggle definition in mkdocs.yml : 1 2 3 4 5 6 7 8 9 10 11 12 theme : palette : - media : \"(prefers-color-scheme: light)\" scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette. After reading the above, as well as squidfunk/mkdocs-material#1266 , my understanding is: Toggling the theme using the toggle switch will switch the preferred color scheme; and Switching the preferred color scheme will toggle the theme. However, they are disconnected as far as I can tell. Observed behavior Toggling the theme using the switch in the header of this page will update the theme, but not the scheme. Toggling the preferred color scheme (e.g., on MacOS, switching from Light to Dark in System Preferences \u00bb General \u00bb Appearance ) will update the scheme, but not the theme. Detail Test matrix: Theme \ud83d\udc49 Scheme \ud83d\udc47 Light Dark Light Dark Tested with: package version mkdocs 1.1.2 mkdocs-material 7.1.6 mkdocs-material-extensions 1.0.1 Work-around using extra_css to tie image selection to user-selected theme Consider this \u2026 1 2 3 4 5 /* docs/image_theme.css */ img . dark { display : none ; } img . light { display : unset ; } [ data-md-color-scheme = \"slate\" ] img . dark { display : unset ; } [ data-md-color-scheme = \"slate\" ] img . light { display : none ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # mkdocs.yml # \u2026 extra_css : - image_theme.css # \u2026 theme : name : \"material\" # \u2026 palette : - scheme : default media : \"(prefers-color-scheme: light)\" toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - scheme : slate media : \"(prefers-color-scheme: dark)\" toggle : icon : material/toggle-switch name : Switch to light mode # \u2026 1 < img class = \"light\" src = \"light.png\" />< img class = \"dark\" src = \"dark.png\" /> \u2026 which renders as: This leverages the custom color scheme overrides mechanism to tie image presentation to the chosen theme, which gets close to the desired behavior. Pros It preserves the existing theme toggle behavior. It\u2019s a pretty minimal intrusion (four lines of CSS and use of the extra_css setting ). It\u2019s pretty readable. If you were ignorant (or forgetful) of the approach, and came across one of the <img \u2026> s, you probably wouldn\u2019t have to do too much digging to find out what was going on. Cons It\u2019s bespoke. It\u2019s pretty fragile. The CSS selectors are tied to the theme names. One could probably work around this as well, but they probably add a disproportionate amount of complexity for their value. All image variants are retrieved on page load, even those that won\u2019t be displayed until a theme change (which is probably a rare event). This isn\u2019t ideal, and gets worse as the number of theme-specific image variants increases. Work-around using extra_javascript to tie theme selection to prefers-color-scheme Consider this \u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // docs/image_theme.js const mediaQueryList = window . matchMedia ( \"(prefers-color-scheme: dark)\" ); function handleColorSchemeChange ( event ) { var body = document . querySelector ( \"body[data-md-color-scheme]\" ); var theme ; if ( event . matches ) { theme = \"slate\" ; } else { theme = \"default\" ; } if ( body !== null && theme !== null ) { body . setAttribute ( \"data-md-color-scheme\" , theme ); } } handleColorSchemeChange ( mediaQueryList ); mediaQueryList . addListener ( handleColorSchemeChange ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # mkdocs.yml # \u2026 extra_javascript : - image_theme.js # \u2026 theme : name : \"material\" # \u2026 palette : # Note: toggle sections have been removed - scheme : default media : \"(prefers-color-scheme: light)\" - scheme : slate media : \"(prefers-color-scheme: dark)\" # \u2026 \u2026 and let\u2019s revisit this (from above) \u2026 1 2 3 4 < picture > < source srcset = \"dark.png\" media = \"(prefers-color-scheme: dark)\" /> < img src = \"light.png\" /> </ picture > \u2026 which would render\u00b9 as: Note \u00b9 This is emulated here using image_theme_emulated.js in lieu of image_theme.js . This is to preserve the aforementioned disconnected behavior for observation/experimentation. This adapts this approach to tie theme selection to the chosen prefers-color-scheme , which emulates the desired behavior. Pros It\u2019s a pretty minimal intrusion (some straightforward JavaScript, and use of the extra_javascript setting ). It works with existing standard approaches like the ` Cons It fights with the user selected theme toggle. Consider disabling it by deleting any theme \u00bb palette \u00bb toggle settings. It\u2019s still pretty fragile. The JavaScript is tied to the theme names.","title":"Test case"},{"location":"#illustration-of-themescheme-disconnect-in-squidfunkmkdocs-material2727","text":"","title":"Illustration of theme/scheme disconnect in squidfunk/mkdocs-material#2727"},{"location":"#setup","text":"Consider this \u2026 1 2 3 4 < picture > < source srcset = \"dark.png\" media = \"(prefers-color-scheme: dark)\" /> < img src = \"light.png\" /> </ picture > \u2026 which renders as:","title":"Setup"},{"location":"#expected-behavior","text":"From the docs : In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media field next to the toggle definition in mkdocs.yml : 1 2 3 4 5 6 7 8 9 10 11 12 theme : palette : - media : \"(prefers-color-scheme: light)\" scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette. After reading the above, as well as squidfunk/mkdocs-material#1266 , my understanding is: Toggling the theme using the toggle switch will switch the preferred color scheme; and Switching the preferred color scheme will toggle the theme. However, they are disconnected as far as I can tell.","title":"Expected behavior"},{"location":"#observed-behavior","text":"Toggling the theme using the switch in the header of this page will update the theme, but not the scheme. Toggling the preferred color scheme (e.g., on MacOS, switching from Light to Dark in System Preferences \u00bb General \u00bb Appearance ) will update the scheme, but not the theme.","title":"Observed behavior"},{"location":"#detail","text":"Test matrix: Theme \ud83d\udc49 Scheme \ud83d\udc47 Light Dark Light Dark Tested with: package version mkdocs 1.1.2 mkdocs-material 7.1.6 mkdocs-material-extensions 1.0.1","title":"Detail"},{"location":"#work-around-using-extra_css-to-tie-image-selection-to-user-selected-theme","text":"Consider this \u2026 1 2 3 4 5 /* docs/image_theme.css */ img . dark { display : none ; } img . light { display : unset ; } [ data-md-color-scheme = \"slate\" ] img . dark { display : unset ; } [ data-md-color-scheme = \"slate\" ] img . light { display : none ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # mkdocs.yml # \u2026 extra_css : - image_theme.css # \u2026 theme : name : \"material\" # \u2026 palette : - scheme : default media : \"(prefers-color-scheme: light)\" toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - scheme : slate media : \"(prefers-color-scheme: dark)\" toggle : icon : material/toggle-switch name : Switch to light mode # \u2026 1 < img class = \"light\" src = \"light.png\" />< img class = \"dark\" src = \"dark.png\" /> \u2026 which renders as: This leverages the custom color scheme overrides mechanism to tie image presentation to the chosen theme, which gets close to the desired behavior.","title":"Work-around using extra_css to tie image selection to user-selected theme"},{"location":"#pros","text":"It preserves the existing theme toggle behavior. It\u2019s a pretty minimal intrusion (four lines of CSS and use of the extra_css setting ). It\u2019s pretty readable. If you were ignorant (or forgetful) of the approach, and came across one of the <img \u2026> s, you probably wouldn\u2019t have to do too much digging to find out what was going on.","title":"Pros"},{"location":"#cons","text":"It\u2019s bespoke. It\u2019s pretty fragile. The CSS selectors are tied to the theme names. One could probably work around this as well, but they probably add a disproportionate amount of complexity for their value. All image variants are retrieved on page load, even those that won\u2019t be displayed until a theme change (which is probably a rare event). This isn\u2019t ideal, and gets worse as the number of theme-specific image variants increases.","title":"Cons"},{"location":"#work-around-using-extra_javascript-to-tie-theme-selection-to-prefers-color-scheme","text":"Consider this \u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // docs/image_theme.js const mediaQueryList = window . matchMedia ( \"(prefers-color-scheme: dark)\" ); function handleColorSchemeChange ( event ) { var body = document . querySelector ( \"body[data-md-color-scheme]\" ); var theme ; if ( event . matches ) { theme = \"slate\" ; } else { theme = \"default\" ; } if ( body !== null && theme !== null ) { body . setAttribute ( \"data-md-color-scheme\" , theme ); } } handleColorSchemeChange ( mediaQueryList ); mediaQueryList . addListener ( handleColorSchemeChange ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # mkdocs.yml # \u2026 extra_javascript : - image_theme.js # \u2026 theme : name : \"material\" # \u2026 palette : # Note: toggle sections have been removed - scheme : default media : \"(prefers-color-scheme: light)\" - scheme : slate media : \"(prefers-color-scheme: dark)\" # \u2026 \u2026 and let\u2019s revisit this (from above) \u2026 1 2 3 4 < picture > < source srcset = \"dark.png\" media = \"(prefers-color-scheme: dark)\" /> < img src = \"light.png\" /> </ picture > \u2026 which would render\u00b9 as: Note \u00b9 This is emulated here using image_theme_emulated.js in lieu of image_theme.js . This is to preserve the aforementioned disconnected behavior for observation/experimentation. This adapts this approach to tie theme selection to the chosen prefers-color-scheme , which emulates the desired behavior.","title":"Work-around using extra_javascript to tie theme selection to prefers-color-scheme"},{"location":"#pros_1","text":"It\u2019s a pretty minimal intrusion (some straightforward JavaScript, and use of the extra_javascript setting ). It works with existing standard approaches like the `","title":"Pros"},{"location":"#cons_1","text":"It fights with the user selected theme toggle. Consider disabling it by deleting any theme \u00bb palette \u00bb toggle settings. It\u2019s still pretty fragile. The JavaScript is tied to the theme names.","title":"Cons"}]}